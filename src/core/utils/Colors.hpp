#pragma once

#include <array>
#include <string>
#include <unordered_map>
#include <vector>

namespace Core::Utils
{
inline const static std::unordered_map<std::string, const std::string> COLORS {
	{ "WHITE", "FFFFFF" }, { "LIGHT_GRAY", "D3D3D3" },
	{ "DEEP_SAFFRON", "FF9933" }, { "RED", "FF0000" },
	{ "BRIGHT_BLUE", "0096FF" }, { "DRY_HIGHLIGHTER_GREEN", "33AA22" },
	{ "MILLION_GREY", "999999" }, { "GOLD_FUSION", "FFAF00" },
	{ "CREAM_BRULEE", "FFE599" }, { "LIME", "00FF00" }, { "YELLOW", "FFFF00" }
};

inline const static std::vector<unsigned int> NICKNAME_COLORS = {
	/*0x000000FF,*/
	0x000080FF, 0x00008BFF, 0x0000CDFF, 0x0000FFFF, 0x006400FF, 0x008000FF,
	0x008080FF, 0x008B8BFF, 0x00BFFFFF, 0x00CED1FF, 0x00FA9AFF, 0x00FF00FF,
	0x00FF7FFF, 0x00FFFFFF, 0x028151FF, 0x0495CDFF, 0x057F94FF, 0x05D1CDFF,
	0x0BE472FF, 0x0C8E5DFF, 0x0DE018FF, 0x0FD9FAFF, 0x10C9C5FF, 0x10DC29FF,
	0x115099FF, 0x11F891FF, 0x12D6D4FF, 0x148B8BFF, 0x14FF7FFF, 0x184D3BFF,
	0x18F71FFF, 0x191970FF, 0x1A30BFFF, 0x1E90FFFF, 0x20B2AAFF, 0x20D4ADFF,
	0x228B22FF, 0x22F767FF, 0x247C1BFF, 0x275222FF, 0x2A51E2FF, 0x2D74FDFF,
	0x2E8B57FF, 0x2F4F4FFF, 0x2FC827FF, 0x2FD9DEFF, 0x3214AAFF, 0x32CD32FF,
	/*0x333333FF,*/ 0x369976FF, 0x3793FAFF, 0x388EEAFF,
	/*0x3C1C0DFF,*/ 0x3CB371FF, 0x3D0A4FFF, 0x40E0D0FF, 0x4169E1FF, 0x42ACF5FF,
	0x4682B4FF, 0x483D8BFF, 0x48C000FF, 0x48D1CCFF, 0x491B9EFF, 0x4949A0FF,
	0x4B0082FF, 0x4B8987FF, 0x4C436EFF, 0x534081FF, 0x53EB10FF, 0x54137DFF,
	0x556B2FFF, 0x5C1ACCFF, 0x5F9EA0FF, 0x6152C2FF, 0x635B03FF, 0x6495EDFF,
	0x65ADEBFF, 0x663399FF, 0x66DCAAFF, 0x696969FF, 0x6A5ACDFF, 0x6B8E23FF,
	0x70524DFF, 0x708090FF, 0x717856FF, 0x778899FF, 0x7B39AAFF, 0x7B68EEFF,
	0x7CFC00FF, 0x7E49D7FF, 0x7FFF00FF, 0x7FFFD4FF, 0x800000FF, 0x800080FF,
	0x808000FF, 0x808080FF, 0x829DC7FF, 0x87CEFAFF, 0x89FACDFF, 0x8A2BE2FF,
	0x8A2CD7FF, 0x8B0000FF, 0x8B008BFF, 0x8B4513FF, 0x8FBC8FFF, 0x90239DFF,
	0x90EE90FF, 0x9370DBFF, 0x93AB1CFF, 0x93B7E4FF, 0x9400D3FF, 0x94436EFF,
	0x95BAF0FF, 0x98FB98FF, 0x9932CCFF, 0x9A6980FF, 0x9ACD32FF, 0x9F945CFF,
	0xA04E0AFF, 0xA0522DFF, 0xA2FF00FF, 0xA52A2AFF, 0xA55043FF, 0xA9A9A9FF,
	0xADD8E6FF, 0xADFF2FFF, 0xAE4B99FF, 0xAF2FF3FF, 0xAFEEEEFF, 0xB0C4DEFF,
	0xB0E0E6FF, 0xB22222FF, 0xB740C2FF, 0xB8860BFF, 0xB98519FF, 0xBA55D3FF,
	0xBC8F8FFF, 0xBCE635FF, 0xBD1EF2FF, 0xBD34DAFF, 0xBDB76BFF, 0xBF00FFFF,
	0xC0C0C0FF, 0xC1F7ECFF, 0xC471BDFF, 0xC71585FF, 0xC715FFFF, 0xCB7ED3FF,
	0xCD5C5CFF, 0xCD853FFF, 0xCE76BEFF, 0xCE79EEFF, 0xCEA6DFFF, 0xCF72A9FF,
	0xD2691EFF, 0xD2B48CFF, 0xD3D3D3FF, 0xD63034FF, 0xD8BFD8FF, 0xD8C762FF,
	0xDA70D6FF, 0xDAA520FF, 0xDB7093FF, 0xDBB76BFF, 0xDC143CFF, 0xDCDCDCFF,
	0xDCDE3DFF, 0xDDA0DDFF, 0xDEB887FF, 0xDFB935FF, 0xE0FFFFFF, 0xE3AC12FF,
	0xE3AE9DFF, 0xE59338FF, 0xE6E6FAFF, 0xE9967AFF, 0xE9AB2FFF, 0xEE82EEFF,
	0xEEDC2DFF, 0xEEE8AAFF, 0xEF6CE8FF, 0xF08080FF, 0xF09F5BFF, 0xF0E68CFF,
	0xF0F8FFFF, 0xF0FFF0FF, 0xF0FFFFFF, 0xF2F853FF, 0xF4A460FF, 0xF5DEB3FF,
	0xF5F5DCFF, 0xF5F5F5FF, 0xF5FFFAFF, 0xF8F8FFFF, 0xFA24CCFF, 0xFA8072FF,
	0xFAEBD7FF, 0xFAF0E6FF, 0xFAFAD2FF, 0xFAFB71FF, 0xFC42A8FF, 0xFDF5E6FF,
	0xFF0000FF, 0xFF00AEFF, 0xFF00FFFF, 0xFF1493FF, 0xFF4500FF, 0xFF6347FF,
	0xFF69B4FF, 0xFF7F50FF, 0xFF8C00FF, 0xFF8C13FF, 0xFFA07AFF, 0xFFA500FF,
	0xFFA600FF, 0xFFB6C1FF, 0xFFC0CBFF, 0xFFD700FF, 0xFFD720FF, 0xFFDAB9FF,
	0xFFDEADFF, 0xFFE4B5FF, 0xFFE4C4FF, 0xFFFF00FF
	/*0xFFE4E1FF,0xFFEBCDFF,0xFFEFD5FF,0xFFF0F5FF,0xFFF5EEFF,0xFFF8DCFF,0xFFFACDFF,0xFFFAF0FF,0xFFFAFAFF,0xFFFFE0FF,0xFFFFF0FF,0xFFFFFEFF*/
};
}